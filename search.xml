<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>常用软件&amp;开发环境</title>
    <url>/2019/10/11/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h2 id="开发常用工具"><a href="#开发常用工具" class="headerlink" title="开发常用工具"></a>开发常用工具</h2><p>平时经常使用的开发工具及插件</p>
<ol>
<li><p><a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">IDEA</a></p>
<p> <em>插件</em></p>
<ul>
<li>Rainbow Brackets</li>
</ul>
</li>
<li><p>Visual Studio Code</p>
<p> <em>插件</em></p>
<ul>
<li>Live Server</li>
<li>Project Manager</li>
<li>Rainbow Brackets</li>
<li>LESS/Sass</li>
</ul>
</li>
<li>Postman</li>
<li>Navicat Premium</li>
<li>Xshell</li>
<li>winSCP</li>
<li>Beyond Compare</li>
<li>Sublime 3</li>
<li>notepad++</li>
<li>PowerDesigner</li>
<li>jd-gui</li>
</ol>
<p>其他工具</p>
<ol>
<li>Everything</li>
<li>Tyora</li>
<li>Axure RP</li>
<li>XMind</li>
<li>向日葵</li>
<li></li>
</ol>
<h4 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h4><ol>
<li>JDK</li>
<li>Node.js</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Effective Java学习笔记2019-5-7</title>
    <url>/2019/05/07/Effective%20Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02019-5-7/</url>
    <content><![CDATA[<h1 id="第1条：用静态工厂方法代替构造器"><a href="#第1条：用静态工厂方法代替构造器" class="headerlink" title="第1条：用静态工厂方法代替构造器"></a>第1条：用静态工厂方法代替构造器</h1><p>类可以提供一个公有的静态工厂方法（static factory method）,只是返回类的实例的静态方法。</p>
<p>举例：将boolean基本类型值转换成了一个Boolean对象引用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">valueOf</span><span class="params">(<span class="keyword">boolean</span> b)</span></span>&#123;</span><br><span class="line">    renturn b ? Boolean.TRUE : Boolean.FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong><br>静态工厂方法与设计模式中的工厂方法模式不同。</p>
<p><strong>静态工厂方法与构造器不同的第一大优势在于，它们有名称。</strong><br>如果构造器的参数本身没有确切地描述正被返回的对象，那么具有适当名称的静态工厂会更容易使用，产生的<br>客户端代码也更易于阅读。</p>
<p>例如，构造器 BigInteger(int,int,Random)返回的BigInteger可能为素数（质数），如果用名为BigInteger.probablePrime的静态工厂方法来表示，显然更为清楚 (Java4 版本中加了这个方法)。</p>
<p>通过提供两个不同的构造器（它们的参数列表只是在参数类型的顺序上有所不同），对于这样的API用户记不住改用哪个构造器。静态构造方法可仔细选择名称以区别代替构造器</p>
<p>写在最后：练习Markdown书写，内容基本照搬书。</p>
<blockquote>
<p>参考书籍<br> 《Effective Java 第三版》</p>
</blockquote>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>My New Post</title>
    <url>/2019/05/06/%E6%B5%8B%E8%AF%95%E7%94%A8My-New-Post/</url>
    <content><![CDATA[<h2 id="测试标题"><a href="#测试标题" class="headerlink" title="测试标题"></a>测试标题</h2><p> 测试内容</p>
<p>typora + mermaid<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[Hard edge] --&gt;B(Round edge)</span><br><span class="line">    B --&gt; C&#123;Decision&#125;</span><br><span class="line">    C --&gt;|One| D[Result one]</span><br><span class="line">    C --&gt;|Two| E[Result two]</span><br></pre></td></tr></table></figure></p>
<p>有道云<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[Hard edge] --&gt;B(Round edge)</span><br><span class="line">    B --&gt; C&#123;Decision&#125;</span><br><span class="line">    C --&gt;|One| D[Result one]</span><br><span class="line">    C --&gt;|Two| E[Result two]</span><br></pre></td></tr></table></figure></p>
<p>原版(hexo 插件[hexo-filter-flowchar]: <a href="https://github.com/bubkoo/hexo-filter-flowchart" target="_blank" rel="noopener">hexo-filter-flowchar</a>和<a href="https://github.com/bubkoo/hexo-filter-sequence" target="_blank" rel="noopener">hexo-filter-sequence</a>)</p>
<p>hexo-filter-flowchart</p>
<div id="flowchart-0" class="flow-chart"></div>

<div id="flowchart-1" class="flow-chart"></div>

<p>hexo-filter-sequence</p>
<p><div id="sequence-0"></div></p>
<p><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: Start
op=>operation: Your Operation
cond=>condition: Yes or No?
e=>end

st->op->cond
cond(yes)->e
cond(no)->op</textarea><textarea id="flowchart-0-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><textarea id="flowchart-1-code" style="display: none">st=>start: Start|past:>http://www.google.com[blank]
e=>end: End:>http://www.google.com
op1=>operation: My Operation|past
op2=>operation: Stuff|current
sub1=>subroutine: My Subroutine|invalid
cond=>condition: Yes
or No?|approved:>http://www.google.com
c2=>condition: Good idea|rejected
io=>inputoutput: catch something...|request

st->op1(right)->cond
cond(yes, right)->c2
cond(no)->sub1(left)->op1
c2(yes)->io->e
c2(no)->op2->e</textarea><textarea id="flowchart-1-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-1-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-1", options);</script><script src="https://cdnjs.cloudflare.com/ajax/libs/webfont/1.6.27/webfontloader.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/snap.svg/0.4.1/snap.svg-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js"></script><textarea id="sequence-0-code" style="display: none">Alice->Bob: Hello Bob, how are you?
Note right of Bob: Bob thinks
Bob-->Alice: I am good thanks!</textarea><textarea id="sequence-0-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("sequence-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-0-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-0", options);</script></p>
]]></content>
      <categories>
        <category>测试分类</category>
      </categories>
      <tags>
        <tag>测试标签</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/05/06/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
